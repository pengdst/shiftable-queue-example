// Code generated by mockery. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockRestAPI is an autogenerated mock type for the RestAPI type
type MockRestAPI struct {
	mock.Mock
}

type MockRestAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRestAPI) EXPECT() *MockRestAPI_Expecter {
	return &MockRestAPI_Expecter{mock: &_m.Mock}
}

// SimulateProcessing provides a mock function with given fields: _a0
func (_m *MockRestAPI) SimulateProcessing(_a0 *Queue) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SimulateProcessing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Queue) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRestAPI_SimulateProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateProcessing'
type MockRestAPI_SimulateProcessing_Call struct {
	*mock.Call
}

// SimulateProcessing is a helper method to define mock.On call
//   - _a0 *Queue
func (_e *MockRestAPI_Expecter) SimulateProcessing(_a0 interface{}) *MockRestAPI_SimulateProcessing_Call {
	return &MockRestAPI_SimulateProcessing_Call{Call: _e.mock.On("SimulateProcessing", _a0)}
}

func (_c *MockRestAPI_SimulateProcessing_Call) Run(run func(_a0 *Queue)) *MockRestAPI_SimulateProcessing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Queue))
	})
	return _c
}

func (_c *MockRestAPI_SimulateProcessing_Call) Return(_a0 error) *MockRestAPI_SimulateProcessing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRestAPI_SimulateProcessing_Call) RunAndReturn(run func(*Queue) error) *MockRestAPI_SimulateProcessing_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRestAPI creates a new instance of MockRestAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRestAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRestAPI {
	mock := &MockRestAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
